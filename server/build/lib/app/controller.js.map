{"version":3,"sources":["../../../src/lib/app/controller.js"],"names":["findAll","req","res","next","query","result","json","getById","params","id","insert","name","body","trim","title","pathname","logo","cover","url","desc","type","updateById","removeById"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;AACA;;;;AAEA,IAAMA;AAAA,sFAAU,iBAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACO,kBAAWH,OAAX,CAAmB,4BAAWC,IAAIG,KAAf,2BAAnB,CADP;;AAAA;AACRC,kBADQ;;AAEdH,gBAAII,IAAJ,CAAS,0BAAaD,MAAb,CAAT;;AAFc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAV;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAKA,IAAME;AAAA,uFAAU,kBAAON,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACO,kBAAWI,OAAX,CAAmBN,IAAIO,MAAJ,CAAWC,EAA9B,CADP;;AAAA;AACRJ,kBADQ;;AAEdH,gBAAII,IAAJ,CAAS,0BAAaD,MAAb,CAAT;;AAFc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAV;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAKA,IAAMK,SAAS,SAATA,MAAS,CAACT,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACjC,MAAMQ,OAAO,CAACV,IAAIW,IAAJ,CAASD,IAAT,IAAiB,EAAlB,EAAsBE,IAAtB,EAAb;AACA,MAAMC,QAAQ,CAACb,IAAIW,IAAJ,CAASE,KAAT,IAAkB,EAAnB,EAAuBD,IAAvB,EAAd;AACA,MAAME,WAAW,CAACd,IAAIW,IAAJ,CAASG,QAAT,IAAqB,EAAtB,EAA0BF,IAA1B,EAAjB;AACA,MAAMG,OAAO,CAACf,IAAIW,IAAJ,CAASI,IAAT,IAAiB,EAAlB,EAAsBH,IAAtB,EAAb;AACA,MAAMI,QAAQ,CAAChB,IAAIW,IAAJ,CAASK,KAAT,IAAkB,EAAnB,EAAuBJ,IAAvB,EAAd;AACA,MAAMK,MAAM,CAACjB,IAAIW,IAAJ,CAASM,GAAT,IAAgB,EAAjB,EAAqBL,IAArB,EAAZ;AACA,MAAMM,OAAO,CAAClB,IAAIW,IAAJ,CAASO,IAAT,IAAiB,EAAlB,EAAsBN,IAAtB,EAAb;AACA,MAAMO,OAAO,CAACnB,IAAIW,IAAJ,CAASQ,IAAT,IAAiB,GAAlB,EAAuBP,IAAvB,EAAb;AACAX,MAAII,IAAJ,CAAS,EAAC,UAAS,EAAC,QAAO,CAAR,EAAU,WAAU,SAApB,EAAV,EAAyC,QAAO,EAAhD,EAAT;AACD,CAVD;;AAYA,IAAMe,aAAa,SAAbA,UAAa,CAACpB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACrCD,MAAII,IAAJ,CAAS,EAAC,UAAS,EAAC,QAAO,CAAR,EAAU,WAAU,SAApB,EAAV,EAAyC,QAAO,EAAhD,EAAT;AACD,CAFD;;AAIA,IAAMgB,aAAa,SAAbA,UAAa,CAACrB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACrCD,MAAII,IAAJ,CAAS,EAAC,UAAS,EAAC,QAAO,CAAR,EAAU,WAAU,SAApB,EAAV,EAAyC,QAAO,EAAhD,EAAT;AACD,CAFD;;kBAIe;AACbN,kBADa;AAEbO,kBAFa;AAGbG,gBAHa;AAIbW,wBAJa;AAKbC;AALa,C","file":"controller.js","sourcesContent":["import appManager from './manager'\nimport { getFromReq } from '../util/pagination'\nimport { formatResult } from '../util/format'\nimport { APP_LIMIT_DEFAULT } from '../util/const'\n\nconst findAll = async (req, res, next) => {\n  const result = await appManager.findAll(getFromReq(req.query, APP_LIMIT_DEFAULT))\n  res.json(formatResult(result))\n}\n\nconst getById = async (req, res, next) => {\n  const result = await appManager.getById(req.params.id)\n  res.json(formatResult(result))\n}\n\nconst insert = (req, res, next) => {\n  const name = (req.body.name || '').trim()\n  const title = (req.body.title || '').trim()\n  const pathname = (req.body.pathname || '').trim()\n  const logo = (req.body.logo || '').trim()\n  const cover = (req.body.cover || '').trim()\n  const url = (req.body.url || '').trim()\n  const desc = (req.body.desc || '').trim()\n  const type = (req.body.type || '0').trim()\n  res.json({'status':{'code':0,'message':'success'},'data':{}})\n}\n\nconst updateById = (req, res, next) => {\n  res.json({'status':{'code':0,'message':'success'},'data':{}})\n}\n\nconst removeById = (req, res, next) => {\n  res.json({'status':{'code':0,'message':'success'},'data':{}})\n}\n\nexport default {\n  findAll,\n  getById,\n  insert,\n  updateById,\n  removeById\n}\n"]}