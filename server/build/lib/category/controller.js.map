{"version":3,"sources":["../../../src/lib/category/controller.js"],"names":["findAll","req","res","next","query","result","json","insert","name","body","trim","pathname","desc","weight","parseInt","cover","createdByID","user","id","test","getByPathname","getCategoryByPathname","console","log"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;AACA;;;;AAEA,IAAMA;AAAA,sFAAU,iBAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAES,kBAAgBH,OAAhB,CAAwB,4BAAWC,IAAIG,KAAf,gCAAxB,CAFT;;AAAA;AAENC,kBAFM;;AAGZH,gBAAII,IAAJ,CAAS,0BAAaD,MAAb,CAAT;AAHY;AAAA;;AAAA;AAAA;AAAA;;AAKZF,iBAAK,gCAAmB,MAAnB,EAA2B,MAA3B,CAAL;;AALY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAV;;AAAA;AAAA;AAAA;AAAA,GAAN;;AASA,IAAMI;AAAA,uFAAS,kBAAON,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AACPK,gBADO,GACA,CAACP,IAAIQ,IAAJ,CAASD,IAAT,IAAiB,EAAlB,EAAsBE,IAAtB,EADA;AAEPC,oBAFO,GAEI,CAACV,IAAIQ,IAAJ,CAASE,QAAT,IAAqB,EAAtB,EAA0BD,IAA1B,EAFJ;AAGPE,gBAHO,GAGA,CAACX,IAAIQ,IAAJ,CAASG,IAAT,IAAiB,EAAlB,EAAsBF,IAAtB,EAHA;AAIPG,kBAJO,GAIEC,SAASb,IAAIQ,IAAJ,CAASI,MAAlB,KAA6B,CAJ/B;AAKPE,iBALO,GAKC,CAACd,IAAIQ,IAAJ,CAASM,KAAT,IAAkB,EAAnB,EAAuBL,IAAvB,EALD;AAMPM,uBANO,GAMOf,IAAIgB,IAAJ,CAASC,EANhB;;AAOb,gBAAI,CAACV,IAAL,EAAW;AACTL,mBAAK,gCAAmB,MAAnB,EAA2B,QAA3B,CAAL;AACD;AACD,gBAAIQ,YAAY,CAAC,mBAAmBQ,IAAnB,CAAwBR,QAAxB,CAAjB,EAAoD;AAClDR,mBAAK,gCAAmB,MAAnB,EAA2B,aAA3B,CAAL;AACD;AACD,gBAAI,CAACa,WAAL,EAAkB;AAChBb,mBAAK,gCAAmB,MAAnB,EAA2B,QAA3B,CAAL;AACD;AAfY;;AAAA,iBAiBPQ,QAjBO;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAkB2B,kBAAgBS,aAAhB,CAA8BT,QAA9B,CAlB3B;;AAAA;AAkBHU,iCAlBG;;AAAA,iBAmBLA,qBAnBK;AAAA;AAAA;AAAA;;AAAA,8CAoBAlB,KAAK,gCAAmB,MAAnB,EAA2B,SAA3B,CAAL,CApBA;;AAAA;AAAA;AAAA,mBAuBU,kBAAgBI,MAAhB,CAAuB,EAAEC,UAAF,EAAQG,kBAAR,EAAkBC,UAAlB,EAAwBC,cAAxB,EAAgCE,YAAhC,EAAuCC,wBAAvC,EAAvB,CAvBV;;AAAA;AAuBLX,kBAvBK;;AAwBXH,gBAAII,IAAJ,CAAS,2BAAT;AAxBW;AAAA;;AAAA;AAAA;AAAA;;AA0BXgB,oBAAQC,GAAR;AACApB,iBAAK,gCAAmB,MAAnB,EAA2B,MAA3B,CAAL;;AA3BW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAT;;AAAA;AAAA;AAAA;AAAA,GAAN;;kBA+Be;AACbH,kBADa;AAEbO;AAFa,C","file":"controller.js","sourcesContent":["import categoryManager from './manager'\nimport { getFromReq } from '../util/pagination'\nimport { formatResult, handlerCustomError } from '../util/format'\nimport { CATEGORY_LIMIT_DEFAULT } from '../util/const'\n\nconst findAll = async (req, res, next) => {\n  try {\n    const result = await categoryManager.findAll(getFromReq(req.query, CATEGORY_LIMIT_DEFAULT))\n    res.json(formatResult(result))\n  } catch (e) {\n    next(handlerCustomError(102003, '查询失败'))\n  }\n}\n\nconst insert = async (req, res, next) => {\n  const name = (req.body.name || '').trim()\n  const pathname = (req.body.pathname || '').trim()\n  const desc = (req.body.desc || '').trim()\n  const weight = parseInt(req.body.weight) || 1\n  const cover = (req.body.cover || '').trim()\n  const createdByID = req.user.id\n  if (!name) {\n    next(handlerCustomError(102001, '名称不能为空'))\n  }\n  if (pathname && !/^[a-zA-Z0-9-_]+$/.test(pathname)) {\n    next(handlerCustomError(102004, '请输入合法的自定义链接'))\n  }\n  if (!createdByID) {\n    next(handlerCustomError(102005, '非法用户操作'))\n  }\n  try {\n    if (pathname) {\n      const getCategoryByPathname = await categoryManager.getByPathname(pathname)\n      if (getCategoryByPathname) {\n        return next(handlerCustomError(102006, '自定义链接重复'))\n      }\n    }\n    const result = await categoryManager.insert({ name, pathname, desc, weight, cover, createdByID })\n    res.json(formatResult())\n  } catch (e) {\n    console.log(e)\n    next(handlerCustomError(102002, '创建失败'))\n  }\n}\n\nexport default {\n  findAll,\n  insert\n}\n"]}