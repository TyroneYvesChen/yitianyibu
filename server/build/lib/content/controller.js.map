{"version":3,"sources":["../../../src/lib/content/controller.js"],"names":["findAll","req","res","next","options","headers","status","query","result","list","map","_id","item","createdAt","hits","title","json","findAllByCategory","categoryInfo","test","params","id","getById","getByPathname","category","info","content","near","hitById","_content","html","tag","length","_tag","i","push","name","toString","_category","desc","pathname","getNearByCreatedAt","prev","insert","body","trim","tags","split","markdown","createdByID","user","process","render","reg","RegExp","images","match","replace","findOneAndCreate","update","console","log"],"mappings":"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","file":"controller.js","sourcesContent":["import contentManager from './manager'\nimport categoryManager from '../category/manager'\nimport tagManager from '../tag/manager'\nimport { getFromReq } from '../util/pagination'\nimport { formatResult, handlerCustomError } from '../util/format'\nimport { CONTENT_LIMIT_DEFAULT } from '../util/const'\nimport { md, xss } from '../util/tool'\n\nconst findAll = async (req, res, next) => {\n  try {\n    let options = {}\n    if (!req.headers['authorization']) {\n      options.status = 'published'\n    }\n    const result = await contentManager.findAll(getFromReq(req.query, CONTENT_LIMIT_DEFAULT), options)\n    result.list = result.list.map(item => {\n      return {\n        _id: item._id,\n        createdAt: item.createdAt,\n        hits: item.hits,\n        title: item.title,\n        status: item.status\n      }\n    })\n    res.json(formatResult(result))\n  } catch (e) {\n    next(handlerCustomError(104001, '查询失败'))\n  }\n}\n\nconst findAllByCategory = async (req, res, next) => {\n  try {\n    let categoryInfo = null\n    if (/^[0-9a-f]{24}$/.test(req.params.id)) {\n      categoryInfo = await categoryManager.getById(req.params.id)\n    } else {\n      categoryInfo = await categoryManager.getByPathname(req.params.id)\n    }\n    if (!categoryInfo) {\n      next(handlerCustomError(104002, '获取类别信息失败'))\n    }\n    let options = {\n      category: categoryInfo._id\n    }\n    if (!req.headers['authorization']) {\n      options.status = 'published'\n    }\n    const result = await contentManager.findAll(getFromReq(req.query, CONTENT_LIMIT_DEFAULT), options)\n    result.list = result.list.map(item => {\n      return {\n        _id: item._id,\n        createdAt: item.createdAt,\n        hits: item.hits,\n        title: item.title,\n        status: item.status\n      }\n    })\n    result.info = categoryInfo\n    res.json(formatResult(result))\n  } catch (e) {\n    next(handlerCustomError(104003, '查询失败'))\n  }\n}\n\nconst getById = async (req, res, next) => {\n  try {\n    const result = {\n      content: null,\n      category: null,\n      near: null\n    }\n    await contentManager.hitById(req.params.id)\n    let _content = await contentManager.getById(req.params.id)\n    if (!_content) {\n      next(handlerCustomError(104004, '获取文章信息失败'))\n    }\n    result.content = {\n      title: _content.title,\n      html: _content.html,\n      createdAt: _content.createdAt,\n      hits: _content.hits\n    }\n    if (_content.tag && _content.tag.length > 0) {\n      let _tag = []\n      for (let i = 0; i < _content.tag.length; i++) {\n        let info = await tagManager.getById(_content.tag[i])\n        _tag.push(info.name.toString())\n      }\n      result.content.tag = _tag\n    }\n    if (_content.category) {\n      let _category = await categoryManager.getById(_content.category)\n      result.category = {\n        _id: _category._id,\n        name: _category.name,\n        desc: _category.desc,\n        pathname: _category.pathname\n      }\n    }\n    result.near = await contentManager.getNearByCreatedAt(result.content.createdAt)\n    if (result.near.prev) {\n      result.near.prev = {\n        _id: result.near.prev._id,\n        title: result.near.prev.title\n      }\n    }\n    if (result.near.next) {\n      result.near.next = {\n        _id: result.near.next._id,\n        title: result.near.next.title\n      }\n    }\n    res.json(formatResult(result))\n  } catch (e) {\n    next(handlerCustomError(104005, '查询失败'))\n  }\n}\n\nconst insert = async (req, res, next) => {\n  const title = (req.body.title || '').trim()\n  const tags = (req.body.tag || '').trim().split(',')\n  const markdown = (req.body.markdown || '').trim()\n  const category = (req.body.category || '').trim()\n  const createdByID = req.user.id\n  if (!title) {\n    next(handlerCustomError(104006, '标题不能为空'))\n  }\n  if (!markdown) {\n    next(handlerCustomError(104007, '内容不能为空'))\n  }\n  if (!category) {\n    next(handlerCustomError(104008, '类别不能为空'))\n  }\n  if (!tags) {\n    next(handlerCustomError(104009, '标签不能为空'))\n  }\n  if (!createdByID) {\n    next(handlerCustomError(104010, '非法用户操作'))\n  }\n  try {\n    let categoryInfo = null\n    if (category) {\n      categoryInfo = await categoryManager.getById(category)\n      if (!categoryInfo) {\n        return next(handlerCustomError(104011, '类别不存在'))\n      }\n    }\n    const html = `<div class=\"markdown-text\">${xss.process(md.render(markdown || ''))}</div>`\n    const reg = new RegExp('!\\\\[.*?\\\\]\\\\((.*?)\\\\)', 'g')\n    let images = markdown.match(reg) || []\n    images = images.map((item) => {\n        return item.replace(/!\\[.*\\]\\(/, '').replace(/\\)/, '')\n    })\n    let tag = []\n    for (let i = 0; i < tags.length; i++) {\n      let info = await tagManager.findOneAndCreate(tags[i], { createdByID })\n      tag.push(info._id.toString())\n    }\n    const result = await contentManager.insert({\n      title,\n      tag,\n      markdown,\n      html,\n      category: categoryInfo._id,\n      images,\n      createdByID\n    })\n    res.json(formatResult())\n  } catch (e) {\n    next(handlerCustomError(102002, '创建失败'))\n  }\n}\n\nconst update = (req, res, next) => {\n  console.log(1)\n}\n\nexport default {\n  findAll,\n  findAllByCategory,\n  getById,\n  insert,\n  update\n}\n"]}