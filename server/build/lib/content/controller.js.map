{"version":3,"sources":["../../../src/lib/content/controller.js"],"names":["findAll","req","res","next","query","result","list","map","_id","item","createdAt","hits","title","json","findAllByCategory","categoryInfo","test","params","id","getById","getByPathname","category","info","content","hitContentById"],"mappings":"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","file":"controller.js","sourcesContent":["import contentManager from './manager'\nimport categoryManager from '../category/manager'\nimport { getFromReq } from '../util/pagination'\nimport { formatResult, handlerCustomError } from '../util/format'\nimport { CONTENT_LIMIT_DEFAULT } from '../util/const'\n\nconst findAll = async (req, res, next) => {\n  try {\n    const result = await contentManager.findAll(getFromReq(req.query, CONTENT_LIMIT_DEFAULT))\n    result.list = result.list.map(item => {\n      return {\n        _id: item._id,\n        createdAt: item.createdAt,\n        hits: item.hits,\n        title: item.title\n      }\n    })\n    res.json(formatResult(result))\n  } catch (e) {\n    next(handlerCustomError(104001, '查询失败'))\n  }\n}\n\nconst findAllByCategory = async (req, res, next) => {\n  try {\n    let categoryInfo = null\n    if (/^[0-9a-f]{24}$/.test(req.params.id)) {\n      categoryInfo = await categoryManager.getById(req.params.id)\n    } else {\n      categoryInfo = await categoryManager.getByPathname(req.params.id)\n    }\n    if (!categoryInfo) {\n      next(handlerCustomError(104002, '获取类别信息失败'))\n    }\n    const result = await contentManager.findAll(getFromReq(req.query, CONTENT_LIMIT_DEFAULT), {\n      category: categoryInfo._id\n    })\n    result.list = result.list.map(item => {\n      return {\n        _id: item._id,\n        createdAt: item.createdAt,\n        hits: item.hits,\n        title: item.title\n      }\n    })\n    result.info = categoryInfo\n    res.json(formatResult(result))\n  } catch (e) {\n    next(handlerCustomError(104003, '查询失败'))\n  }\n}\n\nconst getById = async (req, res, next) => {\n  try {\n    const result = {\n      content: null,\n      category: null\n    }\n    await contentManager.hitContentById(req.params.id)\n    result.content = await contentManager.getById(req.params.id)\n    if (!result.content) {\n      next(handlerCustomError(104004, '获取文章信息失败'))\n    }\n    if (result.content.category) {\n      result.category = await categoryManager.getById(result.content.category)\n    }\n    res.json(formatResult(result))\n  } catch (e) {\n    next(handlerCustomError(104005, '查询失败'))\n  }\n}\n\nexport default {\n  findAll,\n  findAllByCategory,\n  getById\n}\n"]}