{"version":3,"sources":["../../../src/lib/file/controller.js"],"names":["getFileById","req","res","next","getFileInfoByID","params","id","error","fileInfo","Error","status","code","getFileStreamByID","stream","pipe","saveFile","test","headers","result","json"],"mappings":";;;;;;AAAA;;;;AACA;;;;AAEA,IAAMA,cAAc,SAAdA,WAAc,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACtC,oBAAYC,eAAZ,CAA4BH,IAAII,MAAJ,CAAWC,EAAvC,EAA2C,UAACC,KAAD,EAAQC,QAAR,EAAqB;AAC9D,QAAID,KAAJ,EAAW,OAAOJ,KAAKI,KAAL,CAAP;AACX,QAAI,CAACC,QAAL,EAAe;AACb,UAAMD,SAAQ,IAAIE,KAAJ,CAAU,kCAAV,CAAd;AACAF,aAAMG,MAAN,GAAe,GAAf;AACAH,aAAMI,IAAN,GAAa,MAAb;AACA,aAAOR,KAAKI,MAAL,CAAP;AACD;AACD,sBAAYK,iBAAZ,CAA8BX,IAAII,MAAJ,CAAWC,EAAzC,EAA6C,UAACC,KAAD,EAAQM,MAAR,EAAmB;AAC9D,UAAIN,KAAJ,EAAW,OAAOJ,KAAKI,KAAL,CAAP;AACXM,aAAOC,IAAP,CAAYZ,GAAZ;AACD,KAHD;AAID,GAZD;AAaD,CAdD;;AAgBA,IAAMa,WAAW,SAAXA,QAAW,CAACd,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACnC,MAAI,yBAAyBa,IAAzB,CAA8Bf,IAAIgB,OAAJ,CAAa,cAAb,CAA9B,KACE,uCAAuCD,IAAvC,CAA4Cf,IAAIgB,OAAJ,CAAa,cAAb,CAA5C,CADN,EACkF;AAChFhB,QAAIa,IAAJ,CAAS,kBAAYC,QAAZ,CAAqBd,IAAIgB,OAAzB,EAAkC,UAACV,KAAD,EAAQW,MAAR,EAAmB;AAC5DhB,UAAIiB,IAAJ,CAAS,0BAAaD,MAAb,CAAT;AACD,KAFQ,CAAT;AAGD,GALD,MAKO;AACL,QAAMX,QAAQ,IAAIE,KAAJ,CAAU,4DAAV,CAAd;AACAF,UAAMG,MAAN,GAAe,GAAf;AACAH,UAAMI,IAAN,GAAa,MAAb;AACA,WAAOR,KAAKI,KAAL,CAAP;AACD;AACF,CAZD;;kBAce;AACbP,0BADa;AAEbe;AAFa,C","file":"controller.js","sourcesContent":["import fileManager from './manager'\nimport { formatResult } from '../util/format'\n\nconst getFileById = (req, res, next) => {\n  fileManager.getFileInfoByID(req.params.id, (error, fileInfo) => {\n    if (error) return next(error)\n    if (!fileInfo) {\n      const error = new Error('Image not found in the database.')\n      error.status = 404\n      error.code = 100001\n      return next(error)\n    }\n    fileManager.getFileStreamByID(req.params.id, (error, stream) => {\n      if (error) return next(error)\n      stream.pipe(res)\n    })\n  })\n}\n\nconst saveFile = (req, res, next) => {\n  if (/^multipart\\/form-data/i.test(req.headers[ 'content-type' ]) || \n        /^application\\/x-www-form-urlencoded/i.test(req.headers[ 'content-type' ])) {\n    req.pipe(fileManager.saveFile(req.headers, (error, result) => {\n      res.json(formatResult(result))\n    }))\n  } else {\n    const error = new Error('Image content-type not form-data or x-www-form-urlencoded.')\n    error.status = 400\n    error.code = 100002\n    return next(error)\n  }\n}\n\nexport default {\n  getFileById,\n  saveFile\n}\n"]}