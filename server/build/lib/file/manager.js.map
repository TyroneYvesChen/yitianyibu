{"version":3,"sources":["../../../src/lib/file/manager.js"],"names":["getFileStreamByID","id","callback","createReadStream","_id","getFileInfoByID","findOne","error","file","getFileInfoByMD5","md5","saveFile","headers","files","num","finished","busboy","on","fieldname","name","encoding","mimetype","index","writestream","createWriteStream","filename","content_type","pipe","result","length"],"mappings":";;;;;;AAAA;;;;AACA;;;;AAEA,IAAMA,oBAAoB,SAApBA,iBAAoB,CAACC,EAAD,EAAKC,QAAL,EAAkB;AAC1CA,WAAS,IAAT,EAAe,QAAIC,gBAAJ,CAAqB,EAAEC,KAAKH,EAAP,EAArB,CAAf;AACD,CAFD;;AAIA,IAAMI,kBAAkB,SAAlBA,eAAkB,CAACJ,EAAD,EAAKC,QAAL,EAAkB;AACxC,UAAII,OAAJ,CAAY,EAAEF,KAAKH,EAAP,EAAZ,EAAyB,UAACM,KAAD,EAAQC,IAAR,EAAiB;AACxC,QAAID,KAAJ,EAAW,OAAOL,SAASK,KAAT,CAAP;AACX,QAAIC,IAAJ,EAAU;AACRA,WAAKP,EAAL,GAAUO,KAAKJ,GAAf;AACA,aAAOI,KAAKJ,GAAZ;AACD;AACDF,aAAS,IAAT,EAAeM,IAAf;AACD,GAPD;AAQD,CATD;;AAWA,IAAMC,mBAAmB,SAAnBA,gBAAmB,CAACC,GAAD,EAAMR,QAAN,EAAmB;AAC1C,UAAII,OAAJ,CAAY,EAAEI,QAAF,EAAZ,EAAqB,UAACH,KAAD,EAAQC,IAAR,EAAiB;AACpC,QAAID,KAAJ,EAAW,OAAOL,SAASK,KAAT,CAAP;AACX,QAAIC,IAAJ,EAAU;AACRA,WAAKP,EAAL,GAAUO,KAAKJ,GAAf;AACA,aAAOI,KAAKJ,GAAZ;AACD;AACDF,aAAS,IAAT,EAAeM,IAAf;AACD,GAPD;AAQD,CATD;;AAWA,IAAMG,WAAW,SAAXA,QAAW,CAACC,OAAD,EAAUV,QAAV,EAAuB;AACtC,MAAIW,QAAQ,EAAZ;AACA,MAAIC,MAAM,CAAV;AACA,MAAIC,WAAW,KAAf;AACA,MAAIC,SAAS,qBAAW,EAAEJ,gBAAF,EAAX,CAAb;;AAEAI,SAAOC,EAAP,CAAU,MAAV,EAAkB,UAACC,SAAD,EAAYV,IAAZ,EAAkBW,IAAlB,EAAwBC,QAAxB,EAAkCC,QAAlC,EAA+C;AAC/D,KAAC,UAACC,KAAD,EAAW;AACV,UAAIC,cAAc,QAAIC,iBAAJ,CAAsB;AACtCC,kBAAUN,IAD4B;AAEtCO,sBAAcL;AAFwB,OAAtB,CAAlB;AAIAb,WAAKmB,IAAL,CAAUJ,WAAV;AACAA,kBAAYN,EAAZ,CAAe,OAAf,EAAwB,UAACW,MAAD,EAAY;AAClCA,eAAO3B,EAAP,GAAY2B,OAAOxB,GAAnB;AACA,eAAOwB,OAAOxB,GAAd;AACA,YAAIwB,OAAOC,MAAP,KAAkB,CAAtB,EAAyB;AACvBhB,gBAAMS,KAAN,IAAeM,MAAf;AACD;AACD,YAAI,EAAEd,GAAF,KAAU,CAAV,IAAeC,QAAnB,EAA6B;AAC3Bb,mBAAS,IAAT,EAAeW,KAAf;AACD;AACF,OATD;AAUD,KAhBD,EAgBGC,KAhBH;AAiBD,GAlBD;AAmBAE,SAAOC,EAAP,CAAU,QAAV,EAAoB,YAAM;AACxBF,eAAW,IAAX;AACA,QAAI,CAACD,GAAL,EAAU;AACRZ,eAAS,IAAT,EAAeW,KAAf;AACD;AACF,GALD;AAMA,SAAOG,MAAP;AACD,CAhCD;;kBAkCe;AACbX,kCADa;AAEbI,oCAFa;AAGbT,sCAHa;AAIbW;AAJa,C","file":"manager.js","sourcesContent":["import Busboy from 'busboy'\nimport { gfs } from '../../middleware/db'\n\nconst getFileStreamByID = (id, callback) => {\n  callback(null, gfs.createReadStream({ _id: id }))\n}\n\nconst getFileInfoByID = (id, callback) => {\n  gfs.findOne({ _id: id }, (error, file) => {\n    if (error) return callback(error)\n    if (file) {\n      file.id = file._id\n      delete file._id\n    }\n    callback(null, file)\n  })\n}\n\nconst getFileInfoByMD5 = (md5, callback) => {\n  gfs.findOne({ md5 }, (error, file) => {\n    if (error) return callback(error)\n    if (file) {\n      file.id = file._id\n      delete file._id\n    }\n    callback(null, file)\n  })\n}\n\nconst saveFile = (headers, callback) => {\n  let files = []\n  let num = 0\n  let finished = false\n  let busboy = new Busboy({ headers })\n\n  busboy.on('file', (fieldname, file, name, encoding, mimetype) => {\n    ((index) => {\n      let writestream = gfs.createWriteStream({\n        filename: name,\n        content_type: mimetype\n      })\n      file.pipe(writestream)\n      writestream.on('close', (result) => {\n        result.id = result._id\n        delete result._id\n        if (result.length !== 0) {\n          files[index] = result\n        }\n        if (--num === 0 && finished) {\n          callback(null, files)\n        }\n      })\n    })(num++)\n  })\n  busboy.on('finish', () => {  \n    finished = true\n    if (!num) {\n      callback(null, files)\n    }\n  })\n  return busboy\n}\n\nexport default {\n  getFileInfoByID,\n  getFileInfoByMD5,\n  getFileStreamByID,\n  saveFile\n}\n"]}