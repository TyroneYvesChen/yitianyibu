{"version":3,"sources":["../../../src/lib/message/controller.js"],"names":["findAll","req","res","next","query","result","json","insert","ip","name","body","trim","email","content","length","adds","split","join","removeById","params","id"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;AACA;;AACA;;;;AAEA,IAAMA;AAAA,sFAAU,iBAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAES,kBAAeH,OAAf,CAAuB,4BAAWC,IAAIG,KAAf,+BAAvB,CAFT;;AAAA;AAENC,kBAFM;;AAGZH,gBAAII,IAAJ,CAAS,0BAAaD,MAAb,CAAT;AAHY;AAAA;;AAAA;AAAA;AAAA;;AAKZF,iBAAK,gCAAmB,MAAnB,EAA2B,MAA3B,CAAL;;AALY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAV;;AAAA;AAAA;AAAA;AAAA,GAAN;;AASA,IAAMI;AAAA,uFAAS,kBAAON,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AACPK,cADO,GACF,uBAAYP,GAAZ,CADE;AAETQ,gBAFS,GAEF,CAACR,IAAIS,IAAJ,CAASD,IAAT,IAAiB,EAAlB,EAAsBE,IAAtB,EAFE;AAGPC,iBAHO,GAGC,CAACX,IAAIS,IAAJ,CAASE,KAAT,IAAkB,EAAnB,EAAuBD,IAAvB,EAHD;AAIPE,mBAJO,GAIG,CAACZ,IAAIS,IAAJ,CAASG,OAAT,IAAoB,EAArB,EAAyBF,IAAzB,EAJH;;AAKb,gBAAI,CAACE,QAAQC,MAAb,EAAqB;AACnBX,mBAAK,gCAAmB,MAAnB,EAA2B,QAA3B,CAAL;AACD;AACD,gBAAIM,SAAS,EAAb,EAAiB;AACXM,kBADW,GACJP,GAAGQ,KAAH,CAAS,GAAT,CADI;;AAEfD,mBAAMA,KAAKD,MAAL,GAAc,CAApB,IAA0B,GAA1B;AACAL,qBAAOM,KAAKE,IAAL,CAAU,GAAV,CAAP;AACD;AAZY;AAAA;AAAA,mBAcU,kBAAeV,MAAf,CAAsB,EAAEC,MAAF,EAAMC,UAAN,EAAYG,YAAZ,EAAmBC,gBAAnB,EAAtB,CAdV;;AAAA;AAcLR,kBAdK;;AAeXH,gBAAII,IAAJ,CAAS,2BAAT;AAfW;AAAA;;AAAA;AAAA;AAAA;;AAiBXH,iBAAK,gCAAmB,MAAnB,EAA2B,MAA3B,CAAL;;AAjBW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAT;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAqBA,IAAMe;AAAA,uFAAa,kBAAOjB,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEM,kBAAee,UAAf,CAA0BjB,IAAIkB,MAAJ,CAAWC,EAArC,CAFN;;AAAA;AAETf,kBAFS;;AAGfH,gBAAII,IAAJ,CAAS,2BAAT;AAHe;AAAA;;AAAA;AAAA;AAAA;;AAKfH,iBAAK,gCAAmB,MAAnB,EAA2B,MAA3B,CAAL;;AALe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAb;;AAAA;AAAA;AAAA;AAAA,GAAN;;kBASe;AACbH,kBADa;AAEbO,gBAFa;AAGbW;AAHa,C","file":"controller.js","sourcesContent":["import messageManager from './manager'\nimport { getFromReq } from '../util/pagination'\nimport { formatResult, handlerCustomError } from '../util/format'\nimport { MESSAGE_LIMIT_DEFAULT } from '../util/const'\nimport { getClientIp } from '../util/tool'\n\nconst findAll = async (req, res, next) => {\n  try {\n    const result = await messageManager.findAll(getFromReq(req.query, MESSAGE_LIMIT_DEFAULT))\n    res.json(formatResult(result))\n  } catch (e) {\n    next(handlerCustomError(107003, '查询失败'))\n  }\n}\n\nconst insert = async (req, res, next) => {\n  const ip = getClientIp(req)\n  let name = (req.body.name || '').trim()\n  const email = (req.body.email || '').trim()\n  const content = (req.body.content || '').trim()\n  if (!content.length) {\n    next(handlerCustomError(107001, '内容不能为空'))\n  }\n  if (name === '') {\n    let adds = ip.split('.')\n    adds[ adds.length - 1 ] = '*'\n    name = adds.join('.')\n  }\n  try {\n    const result = await messageManager.insert({ ip, name, email, content })\n    res.json(formatResult())\n  } catch (e) {\n    next(handlerCustomError(107002, '创建失败'))\n  }\n}\n\nconst removeById = async (req, res, next) => {\n  try {\n    const result = await messageManager.removeById(req.params.id)\n    res.json(formatResult())\n  } catch (e) {\n    next(handlerCustomError(107004, '删除失败'))\n  }\n}\n\nexport default {\n  findAll,\n  insert,\n  removeById\n}\n"]}