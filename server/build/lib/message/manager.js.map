{"version":3,"sources":["../../../src/lib/message/manager.js"],"names":["insert","options","create","result","removeById","id","findById","analyse","removed","updatedAt","Date","now","save","findAll","queryOptions","count","total","find","limit","skip","offset","sort","createdAt","list","meta","length"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AAEA,IAAMA;AAAA,sFAAS;AAAA,QAAOC,OAAP,uEAAiB,EAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACQ,gBAAMC,MAAN,CAAa,sBAAc,EAAd,EAAkBD,OAAlB,CAAb,CADR;;AAAA;AACPE,kBADO;AAAA,6CAENA,MAFM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAT;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAKA,IAAMC;AAAA,uFAAa,kBAAOC,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACG,gBAAMC,QAAN,CAAeD,EAAf,CADH;;AAAA;AACbE,mBADa;;AAAA,gBAEZA,OAFY;AAAA;AAAA;AAAA;;AAAA,8CAGR,IAHQ;;AAAA;AAKjBA,oBAAQC,OAAR,GAAkB,IAAlB;AACAD,oBAAQE,SAAR,GAAoBC,KAAKC,GAAL,EAApB;AANiB;AAAA,mBAOIJ,QAAQK,IAAR,EAPJ;;AAAA;AAOXT,kBAPW;AAAA,8CAQVA,MARU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAb;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAWA,IAAMU;AAAA,uFAAU;AAAA,QAAOC,YAAP,uEAAsB,EAAtB;AAAA,QAA0Bb,OAA1B,uEAAoC,EAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACM,gBAAMc,KAAN,CAAY,EAAEP,SAAS,KAAX,EAAZ,CADN;;AAAA;AACRQ,iBADQ;;AAEdf,sBAAU,sBAAcA,OAAd,EAAuB,EAAEO,SAAS,KAAX,EAAvB,CAAV;AAFc;AAAA,mBAGK,gBAAMS,IAAN,CAAWhB,OAAX,EAAoBiB,KAApB,CAA0BJ,aAAaI,KAAvC,EAA8CC,IAA9C,CAAmDL,aAAaM,MAAhE,EAAwEC,IAAxE,CAA6E,EAAEC,WAAW,CAAC,CAAd,EAA7E,CAHL;;AAAA;AAGRC,gBAHQ;AAAA,8CAIP;AACLC,oBAAM,yBAAQR,KAAR,EAAeO,KAAKE,MAApB,EAA4BX,YAA5B,CADD;AAELS;AAFK,aAJO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAV;;AAAA;AAAA;AAAA;AAAA,GAAN;;kBAUe;AACbV,kBADa;AAEbb,gBAFa;AAGbI;AAHa,C","file":"manager.js","sourcesContent":["import Model from './model'\nimport { getMeta } from '../util/pagination'\n\nconst insert = async (options = {}) => {\n  const result = await Model.create(Object.assign({}, options))\n  return result\n}\n\nconst removeById = async (id) => {\n  let analyse = await Model.findById(id)\n  if (!analyse) {\n    return null\n  }\n  analyse.removed = true\n  analyse.updatedAt = Date.now()\n  const result = await analyse.save()\n  return result\n}\n\nconst findAll = async (queryOptions = {}, options = {}) => {\n  const total = await Model.count({ removed: false })\n  options = Object.assign(options, { removed: false })\n  const list = await Model.find(options).limit(queryOptions.limit).skip(queryOptions.offset).sort({ createdAt: -1 })\n  return {\n    meta: getMeta(total, list.length, queryOptions),\n    list\n  }\n}\n\nexport default {\n  findAll,\n  insert,\n  removeById\n}\n"]}