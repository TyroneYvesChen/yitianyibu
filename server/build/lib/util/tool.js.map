{"version":3,"sources":["../../../src/lib/util/tool.js"],"names":["getClientIp","req","headers","connection","remoteAddress","socket","getMD5","str","result","md5","createHash","update","digest","md","set","HTML","xhtmlOut","breaks","linkify","typographer","xss","FilterXSS","onIgnoreTagAttr","tag","name","value","escapeAttrValue"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,cAAc,SAAdA,WAAc,CAACC,GAAD,EAAS;AAC3B,SAAOA,IAAIC,OAAJ,CAAa,iBAAb,KACLD,IAAIE,UAAJ,CAAeC,aADV,IAELH,IAAII,MAAJ,CAAWD,aAFN,IAGLH,IAAIE,UAAJ,CAAeE,MAAf,CAAsBD,aAHxB;AAID,CALD;;AAOA,IAAME,SAAS,SAATA,MAAS,CAACC,GAAD,EAAS;AACtB,MAAIC,SAAS,EAAb;AACA,MAAMC,MAAM,iBAAOC,UAAP,CAAkB,KAAlB,CAAZ;AACAF,WAASC,IAAIE,MAAJ,CAAWJ,GAAX,EAAgBK,MAAhB,CAAuB,KAAvB,CAAT;AACA,SAAOJ,MAAP;AACD,CALD;;AAOA,IAAMK,KAAK,0BAAX;;AAEAA,GAAGC,GAAH,CAAO;AACLC,QAAM,KADD,EACQ;AACbC,YAAU,KAFL,EAEY;AACjBC,UAAQ,KAHH,EAGU;AACfC,WAAS,IAJJ,EAIU;AACfC,eAAa,IALR,CAKc;AALd,CAAP;;AAQA,IAAMC,MAAM,IAAI,cAAMC,SAAV,CAAoB;AAC9BC,iBAD8B,2BACdC,GADc,EACTC,IADS,EACHC,KADG,EACI;AAChC,QAAIF,QAAQ,KAAR,IAAiBC,SAAS,OAA9B,EAAuC;AACrC,aAAUA,IAAV,UAAmB,cAAME,eAAN,CAAsBD,KAAtB,CAAnB;AACD;AACF;AAL6B,CAApB,CAAZ;;QASEzB,W,GAAAA,W;QACAM,M,GAAAA,M;QACAO,E,GAAAA,E;QACAO,G,GAAAA,G","file":"tool.js","sourcesContent":["import crypto from 'crypto'\nimport MarkdownIt from 'markdown-it'\nimport jsxss from 'xss'\n\nconst getClientIp = (req) => {\n  return req.headers[ 'x-forwarded-for' ] ||\n    req.connection.remoteAddress ||\n    req.socket.remoteAddress ||\n    req.connection.socket.remoteAddress\n}\n\nconst getMD5 = (str) => {\n  let result = ''\n  const md5 = crypto.createHash('md5')\n  result = md5.update(str).digest('hex')\n  return result\n}\n\nconst md = new MarkdownIt()\n\nmd.set({\n  HTML: false, // Enable HTML tags in source\n  xhtmlOut: false, // Use '/' to close single tags (<br />)\n  breaks: false, // Convert '\\n' in paragraphs into <br>\n  linkify: true, // Autoconvert URL-like text to links\n  typographer: true, // Enable smartypants and other sweet transforms\n})\n\nconst xss = new jsxss.FilterXSS({\n  onIgnoreTagAttr(tag, name, value) {\n    if (tag === 'pre' && name === 'class') {\n      return `${name}=\"${jsxss.escapeAttrValue(value)}\"`\n    }\n  }\n})\n\nexport {\n  getClientIp,\n  getMD5,\n  md,\n  xss\n}\n"]}